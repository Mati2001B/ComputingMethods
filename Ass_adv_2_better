from dataclasses import dataclass
from loguru import logger

"""
Aggiunta di un decoratore.
Ci arriviamo perch√® notiamo che self
non compare da nessuna parte dentro le funzioni
"""
@dataclass
class Reading:
    """
    Small container class representing a single voltage reading.
    """

    timestamp: float
    adc: int

    def voltage(self):
        """
        Convert ADC counts to a physical voltage 
        """
        return 1.653 * adc * 0.456
"""
    def __init__(self, timestamp, adc):
        self.timestamp = timestamp
        self.adc = adc

    def adc_to_voltage(self, adc):
        
        #Convert ADC counts to a physical voltage 
        
        return 1.653 * adc * 0.456

    def __str__(self):
        return f'Reading at {self.timestamp} s: {self.adc} ADC counts ({self.voltage()} V)'
"""

class Voltagedata:
    """
    Simple interface to a set of voltage reading
    """
    def __init__(self, file_path):
        logger.info(f'Reading voltage data from {file_path}...')
        with open(file_path) as input_file:
            #self._lines = input_file.readlines()
            self._readings = [self._parse_line(line) for line in input_file.readlines()]
        logger.info(f'Done, {len(self._lines)} values read.')
        self._line_iterator = iter(self._lines)
    
    @staticmethod   # Metodo comune a tutte le classi
    def _parse_line(line):
        """
        Parse a single line from a text file and return a reading object
        """
        timestamp, adc = line.split()
        timestamp = float(tymestamp)
        adc = int(adc)
        return Reading(timestamp, adc)
    
    def __iter__(self):
        return self
    
    def __next__(self):
        #return self._parse_line(next(self._line_iterator))
        return next(self._iterator)

    def __getitem__(self, index):
        return self._readings[index]
    


    

if __name__ == '__main__':
    #r = Reading(1., 120)
    #print(r)
    
    data = VoltageData('voltage_data.txt')
    for reading in data:
        print(reading)

    print('Done.')
    print(data[3])
    """
    for reading in VoltageData('voltage_data.txt'):
        print(reading)
    """



